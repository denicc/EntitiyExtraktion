# Colors
# Example to add "COLOR" as ner tag, and hex RGB code as the normalized tag for strings matching a color

# Case insensitive pattern matching (see java.util.regex.Pattern flags)
ENV.defaultStringPatternFlags = 2

# Map variable names to annotation keys
ner = { type: "CLASS", value: "edu.stanford.nlp.ling.CoreAnnotations$NamedEntityTagAnnotation" }
normalized = { type: "CLASS", value: "edu.stanford.nlp.ling.CoreAnnotations$NormalizedNamedEntityTagAnnotation" }

mytokens = { type: "CLASS", value: "stanfordnlp.src.MyAnnotations$MyTokensAnnotation" }
type = { type: "CLASS", value: "stanfordnlp.src.MyAnnotations$MyTypeAnnotation" }
value = { type: "CLASS", value: "stanfordnlp.src.MyAnnotations$MyValueAnnotation" }


# Create OR pattern of
#  regular expression over tokens to hex RGB code

$Cities = (
  /Nürnberg/     => "Medium City" |
  /Stuttgart/     => "Big City" |
  /München/    => "Big City"
)

# Define ruleType to be over tokens
ENV.defaults["ruleType"] = "tokens"

# Define rule that
#  upon matching pattern defined by $Color
#  annotate matched tokens ($0) with ner="COLOR" and normalized=matched value ($$0.value)
{ 
  pattern: ( $Cities ),
  action: ( Annotate($0, ner, "CITIES"), Annotate($0, normalized, $$0.value ) ),
  stage: 1 
}

ENV.defaults["stage"] = 1
ENV.defaultResultAnnotationKey = ner
ENV.defaultNestedResultsAnnotationKey= mytokens 
ENV.defaults["ruleType"] = "composite"
{
  pattern: ( ( [ { ner:COLOR } ]) /ist/ /in/ ( [ { ner:CITIES } ]) ),
  result: Format("OrtIstOrt(%s,%s)",$1[0].word, $2[0].word)
  
}

